package com.ufund.api.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ufund.api.model.Need;
import com.ufund.api.persistence.CupboardDAO;


@RestController
@RequestMapping("needs")
public class UserController {
    private static final Logger LOG = Logger.getLogger(UserController.class.getName());
    private CupboardDAO needDao;

    public UserController(CupboardDAO needDao) {
        this.needDao = needDao;
    }

    @GetMapping("/{id}")
    public ResponseEntity<Need> getNeed(@PathVariable int id) {

        LOG.info("GET /needs/" + id);
        try {
            Need need = needDao.getNeed(id);
            if (need != null){
                return new ResponseEntity<Need>(need,HttpStatus.OK);
            }    
            else{
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
                
        }
        catch(IOException e) {
            LOG.log(Level.SEVERE,e.getLocalizedMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("")
    public ResponseEntity<Need[]> getNeeds() {
        LOG.info("GET /needs");
    
        try {
            Need[] needArray = needDao.getNeeds(); // Directly fetch the list of needs from the DAO
            return new ResponseEntity<>(needArray, HttpStatus.OK);
            
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getLocalizedMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/")
    public ResponseEntity<Need[]> searchNeeds(@RequestParam String name) {
        LOG.info("GET /needs/?name="+name);

        try {

            Need[] NeedArray = needDao.getNeeds();
            ArrayList<Need> foundList = new ArrayList<>();

            for (int i = 0; i < NeedArray.length; i++) {
                
                if (NeedArray[i].getName().indexOf(name) != -1) {
                    foundList.add(NeedArray[i]);
                }
            }

            Need[] foundArray = new Need[foundList.size()];
            foundList.toArray(foundArray);

            return new ResponseEntity<>(foundArray, HttpStatus.OK);

        }

        catch (Exception e) {
            LOG.log(Level.SEVERE,e.getLocalizedMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }

    }

    
    @PostMapping("")
    public ResponseEntity<Need> createNeed(@RequestBody Need need) {
        LOG.info("POST /needs " + need);
    
        try {
            if (need != null) {
                // ID will be automatically generated by the DAO logic
                Need createdNeed = needDao.createNeed(need); 
    
                if (createdNeed == null) {
                    return new ResponseEntity<>(HttpStatus.CONFLICT);
                }
                return new ResponseEntity<>(createdNeed, HttpStatus.CREATED);
            }
            return new ResponseEntity<>(HttpStatus.CONFLICT);
    
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getLocalizedMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    @PutMapping("/{id}")
    public ResponseEntity<Need> updateNeed(@PathVariable int id, @RequestBody Need need) {
        LOG.info("PUT /needs/" + id + " " + String.valueOf(need));
        try {
            Need existingNeed = this.needDao.getNeed(id);
    
            if (existingNeed == null) {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
    
            // Update only fields that are not null or empty in the request body
            if (need.getName() != null && !need.getName().isEmpty()) {
                existingNeed.setName(need.getName());
            }
            if (need.getQuantity() != 0) {
                existingNeed.setQuantity(need.getQuantity());
            }
    
            Need updatedNeed = this.needDao.updateNeed(existingNeed);
                
            if (updatedNeed != null) {
                return new ResponseEntity<>(updatedNeed, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
    
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getLocalizedMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Need> deleteNeed(@PathVariable int id) {
        LOG.info("DELETE /needs/" + id);
        try {
            Need[] needarray = needDao.getNeeds();
            for(int i = 0; i < needarray.length; i++){
                if(needarray[i].getId() == id){
                    needDao.deleteNeed(id);
                    return new ResponseEntity<>(HttpStatus.OK);
                }
            }
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
                    LOG.log(Level.SEVERE, e.getLocalizedMessage());
                }
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }
}


